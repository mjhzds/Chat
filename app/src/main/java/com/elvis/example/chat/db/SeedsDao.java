package com.elvis.example.chat.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEEDS".
*/
public class SeedsDao extends AbstractDao<Seeds, Void> {

    public static final String TABLENAME = "SEEDS";

    /**
     * Properties of entity Seeds.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Sid = new Property(0, String.class, "sid", false, "SID");
        public final static Property Seed = new Property(1, String.class, "seed", false, "SEED");
    }


    public SeedsDao(DaoConfig config) {
        super(config);
    }
    
    public SeedsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEEDS\" (" + //
                "\"SID\" TEXT," + // 0: sid
                "\"SEED\" TEXT);"); // 1: seed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEEDS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Seeds entity) {
        stmt.clearBindings();
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(1, sid);
        }
 
        String seed = entity.getSeed();
        if (seed != null) {
            stmt.bindString(2, seed);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Seeds entity) {
        stmt.clearBindings();
 
        String sid = entity.getSid();
        if (sid != null) {
            stmt.bindString(1, sid);
        }
 
        String seed = entity.getSeed();
        if (seed != null) {
            stmt.bindString(2, seed);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Seeds readEntity(Cursor cursor, int offset) {
        Seeds entity = new Seeds( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // seed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Seeds entity, int offset) {
        entity.setSid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSeed(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Seeds entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Seeds entity) {
        return null;
    }

    @Override
    public boolean hasKey(Seeds entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
